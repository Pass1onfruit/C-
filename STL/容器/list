链表
补充vector的缺点存在的

vector是一个可动态增长的数组
优点：随机访问operator[]->很好的支持排序、二分查找、堆算法的等等
缺点:
头部和中部的插入删除效率低，0(N)，因为需要挪动数据。
插入数据空间不够需要增容，增容需要开新空间、拷贝数据、释放旧空间，会付出很大的代价。


list出厂就是为了解决vector的缺陷
list是一个带头双向循环的链表
优点：
list头部、中间插入不再需要挪动数据，任意位置插入删除数据效率高，效率高。0(1)
list插入数据是新增节点,不需要增容。
缺点：
不支持随机访问

vector和list是两个相辅相成，互补的容器。

支持的操作接口的角度分迭代器的类型:
单向(forword list)、双向(list)、随机(vector)
从使用的场景的角度分迭代器的类型: 
（正向迭代器，反向迭代器)）+ const送代器


1. list是可以在常数范围内在任意位置进行插入和删除的序列式容器，并且该容器可以前后双向迭代。 
2. list的底层是双向链表结构，双向链表中每个元素存储在互不相关的独立节点中，在节点中通过指针指向 其前一个元素和后一个元素。 
3. list与forward_list非常相似：最主要的不同在于forward_list是单链表，只能朝前迭代，已让其更简单高 效。
4. 与其他的序列式容器相比(array，vector，deque)，list通常在任意位置进行插入、移除元素的执行效率 更好。 
5. 与其他序列式容器相比，list和forward_list最大的缺陷是不支持任意位置的随机访问，比如：要访问list 的第6个元素，必须从已知的位置(比如头部或者尾部)迭代到该位置，在这段位置上迭代需要线性的时间 开销；list还需要一些额外的空间，以保存每个节点的相关联信息(对于存储类型较小元素的大list来说这 可能是一个重要的因素)

构造函数：
list() 构造空的list 
list (size_type n, const value_type& val = value_type()) 构造的list中包含n个值为val的元素 
list (const list& x) 拷贝构造函数 
list (InputIterator first, InputIterator last) 用[first, last)区间中的元素构造list

bool empty() const 检测list是否为空，是返回true，否则返回false 
size_t size() const 返回list中有效节点的个数
void push_front (const value_type& val) 在list首元素前插入值为 val的元素 
void pop_front() 删除list中第一个元素 
void push_back (const value_type& val) 在list尾部插入值为val的 元素 
void pop_back() 删除list中最后一个元素 
template void emplace_front (Args&&... args) （C++11） 在list第一个元素前根据参 数直接构造元素 
template void emplace_back (Args&&... args) （C++11） 在list最后一个元素后根据 参数直接构造元素 
template iterator emplace( const_iterator position, Args&&... args) （C++11） 在链表的任意位置根据参 数直接构造元素 
iterator insert (iterator position, const value_type& val) 在list position 位置中插入值为val的元素 
void insert (iterator position, size_type n, const value_type& val) 在list position位置插入n 个值为val的元素 
void insert (iterator position, InputIterator first, InputIterator last) 在list position位置插入 [first, last)区间中元素 
iterator erase (iterator position) 删除list position位置的 元素 
iterator erase (iterator first, iterator last) 删除list中[first, last)区 间中的元素 
void swap (list& x) 交换两个list中的元素 
void resize (size_type n, value_type val = value_type()) 将list中有效元素个数改变 到n个，多出的元素用val 填充 
void clear() 清空list中的有效元素
reference front() 返回list的第一个节点中值的引用 
const_reference front() const 返回list的第一个节点中值的const引用 
reference back() 返回list的最后一个节点中值的引用 
const_reference back() const 返回list的最后一个节点中值的const引用

list iterator：
begin() 返回第一个元素的迭代器 
end() 返回最后一个元素下一个位置的迭代器 
rbegin() 返回第一个元素的reverse_iterator,即end位置 
rend() 返回最后一个元素下一个位置的reverse_iterator,即begin位置 
cbegin() (C++11) 返回第一个元素的cosnt_iterator cend() (C++11) 返回最后一个元素下一个位置的const_iterator 
crbegin() (C++11) 即crend()位置 crend() (C++11) 即crbegin()位置

1. begin与end为正向迭代器，对迭代器执行++操作，迭代器向后移动 
2. rbegin(end)与rend(begin)为反向迭代器，对迭代器执行++操作，迭代器向前移动 
3. cbegin与cend为const的正向迭代器，与begin和end不同的是：该迭代器指向节点中的元素值不能修改 
4. crbegin与crend为const的反向得带器，与rbegin和rend不同的是：该迭代器指向节点中的元素值不能修改
