1. vector是表示可变大小数组的序列容器
2. 就像数组一样，vector也采用的连续存储空间来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的大小是可以动态改变的，而且它的大小会被容器自动处理
3. 本质讲，vector使用动态分配数组来存储它的元素。当新元素插入时候，这个数组需要被重新分配大小为了增加存储空间。其做法是，分配一个新的数组，然后将全部元素移到这个数组。就时间而言，这是这是一个相对代价高的任务，因为每当一个新的元素加入到容器的时候，vector并不会每次都重新分配大小
4. vector分配空间策略：vector会分配一些额外的空间以适应可能的增长，因为存储空间比实际需要的存储空间更大。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的 
5. vector占用了更多的存储空间，为了获得管理存储空间的能力，并且以一种有效的方式动态增长
6. 与其它动态序列容器相比（deques, lists and forward_lists）， vector在访问元素的时候更加高效，在 末尾 添加和删除元素相对高效。对于其它不在末尾的删除和插入操作，效率更低。比起lists和 forward_lists统一的迭代器和引用更好

常用接口：

 vector类对象的基本构造：

vector ()    无参构造
vector (size_type n, const value_type& val = value_type())    构造并初始化n个val
vector (const vector& x)    拷贝构造
vector (InputIterator ﬁrst, InputIterator last)    使用迭代器进行初始化构造

如：
void TestVector() 
{    
vector<int> first;                                // empty vector of ints
vector<int> second (4,100);                       // 4个值为100的整数数组 
vector<int> third (second.begin(), second.end());  // 迭代器遍历second进行构造 
int myints[] = {16,2,77,29};  
vector<int> fourth (myints, myints + sizeof(myints) / sizeof(int) );   //通过myints位置遍历构造
vector<int> fifth (third);                       // 拷贝构造third
}

 vector iterator：

begin()    获取第一个数据位置的iterator
end()    获取最后一个数据的下一个位置的iterator
rbegin()    获取最后一个数据位置的reverse_iterator
rend()    获取第一个数据前一个位置的reverse_iterator
cbegin()    获取第一个数据位置的const_iterator
cend()    获取最后一个数据的下一个位置的const_iterator

string类对象的空间操作：

size()    获取数据个数
capacity()    获取容量大小
empty()    判断是否为空

void resize (size_type n, value_type val = value_type())    改变vector的size
resize在开空间的同时还会进行初始化，影响size

void reserve (size_type n)    改变vector的capacity
reserve只负责开辟空间，如果确定知道需要用多少空间，reserve可以缓解vector增容的代价缺陷问 题

vs下capacity是按1.5倍增长的，g++是按2倍增长的，顺序表增容具体增长多少是根据具体的需求定义 的，vs是PJ版本STL，g++是SGI版本STL

（迭代器失效问题）

vector的增删查改：

void push_back (const value_type& val)    尾插
void pop_back()    尾删
InputIterator ﬁnd (InputIterator ﬁrst, InputIterator last, const T& val)   查找（注意这个是算法模块实现，不是 vector的成员接口）
iterator insert (iterator position, const value_type& val)   在position之前插入val
iterator erase (iterator position)    删除position位置的数据
void swap (vector& x)    交换两个vector的数据空间
reference operator[] (size_type n)    像数组一样访问






