
泛型编程：使用模板，编写跟类型无关的代码
一些函数和类的时候，针对不同类型需要写很多重复的代码
函数:比如我们想实现交换int, double, char等等各种类型对象函数swap
类:比如我们想实现一个数据结构栈stack, stack的多个对象st1存int, st2存double,等等。
在没有模板之，我们得针对各个类型写很多个swap函数和stack类，而这些函数和类逻辑是一样的，只是处理的对象类型不同
1、函数模板
template<class T>void swap (T& a, T& b) ...}
2、类模板
template<class T>
class stack
{private:T* _a: size_t _size;size_t _capacity;}

模板的原理：
编译器根据调用函数模板和类模板的类型，实例化出对应的函数和类

写模板时调用记得用引用传值，如果是传int，char之类的没什么问题，如果是date之类的就很麻烦，直接成了拷贝构造，使用引用减少拷贝提高效率

如果类里只做函数声明，函数写在类外，也要再给类外的函数写上相同的模板

迭代器：

迭代器不一定是指针，像指针一样的东西，有牵引性
string::iterator it = s.begin();
auto it = s.begin();
//C++11  原理被替换成迭代器
//范围for
for （auto ch : s){}

其他迭代器：
string::reverse_iterator rit = s.rbegi n()  //反向迭代器，倒着走

int string2int(const string& data) //一个把字符串转成整形的函数//常量 引用 规范
{
	int val = 0;
	string::const_iterator it = data.begin();  //迭代器也需要定义为常量
        //const类型迭代器只能读不能写
        //*it = ‘a’；  //会报错
	while (it != data.end())
	{
		val *= 10;
		val += (*it) - '0';
		++it;
	}
}

当他们都指向同一个节点,那么在物理内存中他们都存的是这个节点地址,物理上是一样的,
但是他们的类型不一样,他们的意义就不一样,
比如*cur是一个指针的解引用,取到的值是节点
比如*it是去调用迭代器的operator*,返回值是节点中存的值。
类型决定了堆空间的解释权
