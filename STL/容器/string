常用接口：

string类对象的基本构造：

string()    构造空的string类对象，即空字符串
string(const char* s)    用C-string来构造string类对象
string(size_t n, char c)    string类对象中包含n个字符c
string(const string&s)    拷贝构造函数
string(const string&s, size_t n)    用s中的前n个字符构造新的string类对象

如：
void TestString() 
{    
string s1;                // 构造空的string类对象s1    
string s2("hello bit");   // 用C格式字符串构造string类对象s2    
string s3(10, 'a');       // 用10个字符'a'构造string类对象s3    
string s4(s2);            // 拷贝构造s4    
string s5(s3, 5);         // 用s3中前5个字符构造string对象s5 
} 

string类对象的容量操作：

size_t size() const    返回字符串有效字符长度
size_t length() const    返回字符串有效字符长度    
size()与length()方法底层实现原理完全相同，引入size()的原因是为了与其他容器的接口保持一 致，一般情况下基本都是用size()

size_t capacity ( ) const    返回空间总大小
bool empty ( ) const    检测字符串释放为空串，是返回true，否则返回false

void clear()    清空有效字符
 clear()只是将string中有效字符清空，不改变底层空间大小

void resize ( size_t n, char c )    将有效字符的个数该成n个，多出的空间用字符c填充
void resize ( size_t n )    将有效字符的个数改成n个，多出的空间用0填充
resize在改变元素个数时，如果是将元素个数增多，可能会改变底层容量的大 小，如果是将元素个数减少，底层空间总大小不变

void reserve ( size_t res_arg=0 )    为字符串预留空间
 为string预留空间，不改变有效元素个数，当reserve的参数小于 string的底层空间总大小时，reserver不会改变容量大小

 string类对象的访问操作：

char& operator[] ( size_t pos )    返回pos位置的字符，const string类对象调用
const char& operator[] ( size_t pos ) const    返回pos位置的字符，非const string类对象调 用

 string类对象的修改操作：

void push_back(char c)    在字符串后尾插字符c
string& append (const char* s)    在字符串后追加一个字符串
string& operator+=(const string& str)    在字符串后追加字符串str
string& operator+=(const char* s)    在字符串后追加C个数字符串
string& operator+=(char c)    在字符串后追加字符c
在string尾部追加字符时，s.push_back(c) / s.append(1, c) / s += 'c'三种的实现方式差不多，一般 情况下string类的+=操作用的比较多，+= 操作不仅可以连接 单个字符，还可以连接 字符串

const char* c_str( )const    返回C格式字符串
size_t ﬁnd (char c, size_t pos = 0)const    从字符串pos位置开始往后找字符c，返回该字符在 字符串中的位置
size_t rﬁnd(char c, size_t pos = npos)    从字符串pos位置开始往前找字符c，返回该字符在 字符串中的位置
string substr(size_t pos = 0, size_t n = npos)const    在str中从pos位置开始，截取n个字符，然后将其 返回

string类非成员函数：

operator+    尽量少用，因为效率低
operator>>    输入运算符重载
operator<<    输出运算符重载
getline    获取一行字符串
relational operators    大小比较
