
类的两种定义方式：
1. 声明和定义全部放在类体中，成员函数如果在类中定义，编译器可能会将其当成内联函数处 理。
class Person  //class为定义类的关键字
{
	// 类体，由成员函数和成员变量组成   
public:
	void print()
	{
		cout << _name << _sex << _age << endl;
	}
public:
	char* _name;
	char* _sex;
	int _age;
};

2. 声明放在.h文件中，类的定义放在.cpp文件中
//.h文件中
class Person
{
public:
	void print();

public:
	char* _name;
	char* _sex;
	int _age;
};
//.cpp文件中
#include "person.h"
void Person::print()
{
	cout << _name << _sex << _age << endl;
}

访问限定符 
C++实现封装的方式是用类将对象的属性与方法结合在一块，让对象更加完善，通过访问权限选择性的将其 接口提供给外部的用户使用
 
public修饰的成员在类外可以直接被访问 
protected和private修饰的成员在类外不能直接被访问(此处protected和private是类似的)
访问权限作用域从该访问限定符出现的位置开始直到下一个访问限定符出现时为止
class的默认访问权限为private，struct为public(因为struct要兼容C)

访问限定符只在编译时有用，当数据映射到内存后，没有任何访问限定符上的区别

C++中struct和class的区别是什么？ 
C++需要兼容C语言，所以C++中struct可以当成结构体去使用
C++中struct还可以用来定义类，和class是定义类是一样的，区别是struct的成员默认访问方式是public，class是struct的成员默认访问方式 是private

类的作用域：

类定义了一个新的作用域，类的所有成员都在类的作用域中
在类体外定义成员，需要使用 :: 作用域解析符指明成员属于哪个类域（如之前说的在.h和.c中分别
class Person
{
public:
	void PrintPersonInfo();
private:
	char _name[20];
	char _gender[3];
	int  _age;
};
// 这里需要指定PrintPersonInfo是属于Person这个类域 
void Person::PrintPersonInfo()
{
	cout << _name << " "_gender << " " << _age << endl;
}

类的实例化：
用类类型创建对象的过程，称为类的实例化

1. 类只是一个模型一样的东西，限定了类有哪些成员，定义出一个类并没有分配实际的内存空间来存储它
2. 一个类可以实例化出多个对象，实例化出的对象  占用实际的物理空间，存储类成员变量 
3. 类实例化出对象就像现实中使用建筑设计图建造出房子，类就像是设计图，只设计出需要什么东西，但是并没有实体的建筑存在，同样类也只是一个设计
实例化出的对象才能实际存储数据，占用物理空间
