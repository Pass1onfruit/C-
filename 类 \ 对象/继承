继承：
继承机制是面向对象程序设计使代码可以复用的最重要的手段，它允许在保持原有类特性的基础上进行扩展，增加功能，产生新的类，称派生类
继承呈现了面向对象程序设计的层次结构， 此前接触的复用都是函数复用，继承是类设计层次的复用
class Person
{ 
public:    
void Print()   
 {       
 cout << "name:" << _name << endl;   
     cout << "age:" << _age << endl;  
  } 
protected:  
  string _name = "peter";  
  int _age = 18;
};

class Student : public Person
 { 
protected:  
  int _stuid; // 学号
 }; 
class Teacher : public Person
 { 
protected:   
 int _jobid; // 工号
 };

Person是父类，也称作基类。Student是子类，也称作派生类
继承后父类的Person的成员（成员函数+成员变量）都会变成子类的一部分，这里体现出了Student和 Teacher复用了Person的成员

类成员/继承方式 | public继承 | protected继承 | private继承
基类的public成员 | 派生类的public成员 | 派生类的protected成员 |派生类的private成员
基类的protected成员 |派生类的protected成员 | 派生类的protected成员 | 派生类的private成员
基类的private成员 | 在派生类中不可见 | 在派生类中不可见 | 在派生类中不可见
