封装继承多态

封装：
将数据和操作数据的方法进行结合，隐藏对象的属性和实现细节，仅对外公开接口来和对象进行交互
C++通过类，将一个对象的属性与行为结合在一起，使其更符合人们对于一件事物的认知，将属于该对象的 所有东西打包在一起；通过访问限定符选择性的将其部分功能开放出来与其他对象进行交互，而对于对象内 部的一些实现细节，外部用户不需要知道，知道了有些情况下也没用，反而增加了使用或者维护的难度，让 整个事情复杂化
封装本质上是一种管理，在类中，使用类数据和方法都封装到一起， 不想给别人看到的，使用protected，private把成员封装起来，开放一些共有的成员函数能对成员合理的访问

继承：
继承机制是面向对象程序设计使代码可以复用的最重要的手段，它允许在保持原有类特性的基础上进行扩展，增加功能，产生新的类，称派生类
继承呈现了面向对象程序设计的层次结构， 此前接触的复用都是函数复用，继承是类设计层次的复用
class Person
{
public:
	void Print()
	{
		cout << "name:" << _name << endl;
		cout << "age:" << _age << endl;
	}
protected:
	string _name = "peter";
	int _age = 18;
};

class Student : public Person
{
protected:
	int _stuid; // 学号
};
class Teacher : public Person
{
protected:
	int _jobid; // 工号
};

Person是父类，也称作基类。Student是子类，也称作派生类
继承后父类的Person的成员（成员函数+成员变量）都会变成子类的一部分，这里体现出了Student和 Teacher复用了Person的成员

类成员/继承方式 | public继承 | protected继承 | private继承
基类的public成员 | 派生类的public成员 | 派生类的protected成员 |派生类的private成员
基类的protected成员 |派生类的protected成员 | 派生类的protected成员 | 派生类的private成员
基类的private成员 | 在派生类中不可见 | 在派生类中不可见 | 在派生类中不可见

总结： 
1. 基类private成员在派生类中无论以什么方式继承都是不可见的，就是指基类的私有成员虽然被继承到了派生类对象中，但是语法上限制派生类对象不管在类里面还是类外面都不能去访问它
2. 基类private成员在派生类中是不能被访问，如果基类成员不想在类外直接被访问，但需要在派生类中能访问，可以定义为protected，保护成员限定符是因继承才出现的
3. 基类的私有成员在子类都是不可见，基类的其他成员在子类 的访问方式 == Min(成员在基类的访问限定符，继承方式)，public  > protected > private
4. 使用关键字class时默认的继承方式是private，使用struct时默认的继承方式是public，不过最好显示的写出继承方式
5. 在实际运用中一般使用都是public继承，几乎很少使用protetced/private继承，也不提倡使用 protetced/private继承，因为protetced/private继承下来的成员都只能在派生类的类里面使用，实际中 扩展维护性不强

基类和派生类对象赋值转换：

派生类对象可以赋值给基类的对象 / 基类的指针 / 基类的引用
基类对象不能赋值给派生类对象 
基类的指针可以通过强制类型转换赋值给派生类的指针，但是必须是基类的指针是指向派生类对象时才是安全的
class Person
{
protected:
	string _name; // 姓名   
	string _sex;  // 性别    
	int _age;    // 年龄
};
class Student : public Person
{
public:    int _No; // 学号
};
void Test()
{
	Student sobj;
	// 1.子类对象可以赋值给父类对象/指针/引用  
	Person pobj = sobj;
	Person* pp = &sobj;
	Person& rp = sobj;

	//2.基类对象不能赋值给派生类对象  
	//sobj = pobj;

	// 3.基类的指针可以通过强制类型转换赋值给派生类的指针  
	pp = &sobj;
	Student * ps1 = (Student*)pp;
	// 这种情况转换时可以的。    
	ps1->_No = 10;

	pp = &pobj;
	Student* ps2 = (Student*)pp;
	// 这种情况转换时虽然可以，但是会存在越界访问的问题    
	ps2->_No = 10;
}


类成员/继承方式 | public继承 | protected继承 | private继承
基类的public成员 | 派生类的public成员 | 派生类的protected成员 |派生类的private成员
基类的protected成员 |派生类的protected成员 | 派生类的protected成员 | 派生类的private成员
基类的private成员 | 在派生类中不可见 | 在派生类中不可见 | 在派生类中不可见
