

异常是一种处理错误的方式，当一个函数发现自己无法处理的错误时就可以抛出异常，让函数的直接或间接的调用者处理这个错误
throw: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的
catch: 在您想要处理问题的地方，通过异常处理程序捕获异常.catch 关键字用于捕获异常，可以有多 个catch进行捕获
try: try 块中的代码标识将被激活的特定异常,它后面通常跟着一个或多个 catch 块
如果有一个块抛出一个异常，捕获异常的方法会使用 try 和 catch 关键字。try 块中放置可能抛出异常的代 码，try 块中的代码被称为保护代码
try
{
	// 保护的标识代码
}
catch (ExceptionName e1)
{
	// catch 块
}
catch (ExceptionName e2)
{
	// catch 块
}
catch (ExceptionName eN)
{
	// catch 块
}


1. 首先检查throw本身是否在try块内部，如果是再查找匹配的catch语句。如果有匹配的，则调到catch 的地方进行处理
2. 没有匹配的catch则退出当前函数栈，继续在调用函数的栈中进行查找匹配的catch
3. 如果到达main函数的栈，依旧没有匹配的，则终止程序。上述这个沿着调用链查找匹配的catch子句的 过程称为栈展开。所以实际中我们最后都要加一个catch(...)捕获任意类型的异常，否则当有异常没捕获，程序就会直接终止
4. 找到匹配的catch子句并处理以后，会继续沿着catch子句后面继续执行
double Division(int a, int b)
{
	// 当b == 0时抛出异常
	if (b == 0)
		throw "Division by zero condition!";
	//抛出的异常可以是任意类型
	else
		return ((double)a / (double)b);
}
void Func()
{
	int len, time;
	cin >> len >> time;
	cout << Division(len, time) << endl;
}
int main()
{
	try {
		Func();
	}
	//异常必须被捕获，不然回出问题
	//捕获同样类型的异常
	catch (const char* errmsg）{
	cout << errmsg << endl;
		}
	//捕获任意没有匹配类型的异常，防止程序异常终止
	//但是就不知道抛的是什么异常，未知异常
	catch (...) {
		cout << "unkown exception" << endl;
	}
	return 0;
}

异常安全：
构造函数完成对象的构造和初始化，最好不要在构造函数中抛出异常，否则可能导致对象不完整或没有完全初始化
析构函数主要完成资源的清理，最好不要在析构函数内抛出异常，否则可能导致资源泄漏(内存泄漏、句柄未关闭等) 
C++中异常经常会导致资源泄漏的问题，比如
在 new 和 delete 中抛出了异常，导致内存泄漏，
在 lock 和 unlock 之间抛出了异常导致死锁，
C++经常使用RAII来解决以上问题，关于RAII我们智能指针这节进行讲解

实际项目使用中：
1. 项目中使用异常后，一般都是抛出一个类对象，这个对象包含错误的一些相关描述
2. 为了方便捕获，抛出的异常都必须继承自共同的基类
class Exception
{
protected:
	string _errmsg; //错误描述
	int _id;  //错误ID
	//list<StackInfo> _traceStack;  //调用栈的信息
	// ...
};
void Start()
{
	//都在这个函数里抛异常
}
int main()
{
	try {
		// server.Start();
		// 抛出对象都是派生类对象
	}
	catch (const Exception& e) // 这里捕获父类对象就可以
	{
	}
	catch (...)
	{
		cout << "Unkown Exception" << endl;
	}
	return 0;
}
